import express, { query } from "express";
import db from "../config/database.js";
import { ObjectId } from "mongodb";
import cron from "node-cron";
import fetch from "node-fetch";
import bcrypt from "bcryptjs";
import jwt from "jsonwebtoken";
import authMiddleware from "../middlewares/authMiddleware.js";
import nodemailer from "nodemailer";

const API_ROOT = process.env.VITE_ROOT_API;

const router = express.Router();
const ticker = db.collection("stock_ticker");
const portfolio = db.collection("portfolio");
const transaction = db.collection("transaction");
const userSchema = db.collection("user");

const keyPool = [
  "609e212acea948feb7450938a016c088",
  "6b589bf0b3464cddbb59539a6c3d8238",
  "bae5aebed6024ffc9bd8118d9f3ef89a",
  "ac2e2c88ebac496d90b92b225aefd4b4",
  "a812690526f24184b0347c0ce8899b8b",
  "96226cc340d647458a8ee8415757f722",
];
let keyIndex = 0;

function getNextApiKey() {
  const key = keyPool[keyIndex];
  keyIndex = (keyIndex + 1) % keyPool.length;
  return key;
}

cron.schedule("*/1 * * * *", async () => {
  const now = new Date();
  // const hour = now.getHours();
  // const day = now.getDay(); // 0 = Sunday, 6 = Saturday

  // // ‚ùå ‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡πÄ‡∏™‡∏≤‡∏£‡πå‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå
  // if (day === 0 || day === 6) return;

  // // ‚ùå ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ä‡πà‡∏ß‡∏á 20:00 - 03:59 (‡πÄ‡∏û‡∏£‡∏≤‡∏∞ 04:00 ‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏°)
  // if (hour < 20 && hour >= 4) return;
  const res = await fetch(
    `https://api.polygon.io/v1/marketstatus/now?apiKey=30mHX3fZfxe_ievjRkBlJJCjv6DvmpdU`
  );
  if (!res.ok) throw new Error(`HTTP Error! Status: ${res.status}`);

  const status = await res.json();
  console.log(`üì¢ Market Status: ${status.market}`);
  if (status.market.toString() === "closed") {
    console.log("‚è∏ Market is closed, skipping transaction check.");
    return;
  }

  console.log(`üîÑ Checking pending transactions... at ${now}`);

  const pendingTrans = await transaction.find({ status: "pending" }).toArray();

  for (const trans of pendingTrans) {
    const { _id, portId, symbol, bidPrice, action, expiredAt, quantity } =
      trans;
    const expTime = new Date(expiredAt);

    try {
      // Ensure that userId is properly converted to ObjectId if it's a string
      const userId = await transaction.findOne(
        { _id: new ObjectId(_id) },
        { _id: 0, userId: 1 }
      );
      // console.log(userId)
      const user = await userSchema.findOne(
        { _id: new ObjectId(userId.userId) },
        { _id: 0, email: 1 }
      );
      const userEmail = user ? user.email : "Unknown";
      // console.log(userEmail)

      if (now >= expTime) {
        await transaction.updateOne({ _id }, { $set: { status: "failed" } });
        console.log(`‚ùå Transaction ${_id} expired.`);
        console.log(`üìß User email: ${userEmail}`); // Log the email after expiration
        const detail = await transaction.findOne(
          { _id: new ObjectId(_id) },
          { _id: 0, userId: 1 }
        );
        // Send email notification
        const mailOptions = {
          from: "sit.invest.pl3@gmail.com", // Sender's email address
          to: userEmail, // User's email address
          subject: "Transaction result", // Email subject
          text: `${detail.action.toUpperCase()}: ${detail.symbol} amount ${
            detail.totalAmount
          } is ${detail.status}`, // Email body
        };

        // Send the email
        transporter.sendMail(mailOptions, (error, info) => {
          if (error) {
            console.error("Error sending email:", error);
          } else {
            console.log("Email sent: " + info.response);
          }
        });
        continue;
      }

      const apiKey = getNextApiKey();
      const res = await fetch(
        `https://api.twelvedata.com/time_series?apikey=${apiKey}&interval=1min&timezone=Asia/Bangkok&format=JSON&symbol=${symbol}`
      );
      const data = await res.json();

      if (!data.values || data.values.length === 0) continue;
      const marketPrice = parseFloat(data.values[0].close);

      if (
        (action === "buy" && marketPrice.toFixed(2) <= bidPrice) ||
        (action === "sell" && marketPrice.toFixed(2) >= bidPrice)
      ) {
        await transaction.updateOne(
          { _id },
          { $set: { status: "match", actualPrice: marketPrice.toFixed(2) } }
        );

        await userSchema.updateOne(
          { _id: userId },
          {
            $inc: {
              balance:
                action === "buy" ? -bidPrice * quantity : bidPrice * quantity,
            },
          }
        );

        const apiUrl =
          action === "buy" ? `${API_ROOT}/buyStock` : `${API_ROOT}/sellStock`;
        await fetch(apiUrl, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            _id: portId,
            symbol,
            quantity,
            current_mkt_price: marketPrice.toFixed(2),
          }),
        });

        console.log(
          `‚úÖ Transaction ${_id} matched at $${marketPrice.toFixed(2)}`
        );
        console.log(`üìß User email: ${userEmail}`); // Log the email after matching
        const detail = await transaction.findOne(
          { _id: new ObjectId(_id) },
          { _id: 0, userId: 1 }
        );

        const mailOptions = {
          from: "sit.invest.pl3@gmail.com", // Sender's email address
          to: userEmail, // User's email address
          subject: "Transaction result", // Email subject
          text: `${detail.action.toUpperCase()}: ${detail.symbol} amount ${
            detail.totalAmount
          } is ${detail.status}`, // Email body
        };

        // Send the email
        transporter.sendMail(mailOptions, (error, info) => {
          if (error) {
            console.error("Error sending email:", error);
          } else {
            console.log("Email sent: " + info.response);
          }
        });
      }
    } catch (error) {
      console.error(`‚ö†Ô∏è Error checking transaction ${_id}:`, error);
    }
  }
});

router.get("/userDetails/:userId", authMiddleware, async (req, res) => {
  try {
    const userId = req.params.userId;
    const userDetail = await userSchema.findOne({ _id: new ObjectId(userId) });
    res.status(200).json(userDetail);
  } catch (error) {
    console.error("Error:", error);
    res.status(500).json({ error: "Internal Server Error" });
  }
});

router.get("/allticker", async (req, res) => {
  try {
    const allTicker = await ticker.find({}).toArray(); // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ticker ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å MongoDB
    res.status(200).json(allTicker); // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ticker ‡∏Å‡∏•‡∏±‡∏ö‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö JSON
  } catch (error) {
    console.error("Error:", error);
    res.status(500).json({ error: "Internal Server Error" });
  }
});

router.get("/searchTickers/:identifier", async (req, res) => {
  try {
    const identifier = req.params.identifier;
    const formForShow = {
      projection: { _id: 0, ticker: 1, name: 1, market: 1, type: 1 },
    };
    const solution = {
      $or: [
        { ticker: { $regex: `^${identifier}`, $options: "i" } },
        { name: { $regex: `^${identifier}`, $options: "i" } },
      ],
    };
    const ResultTic = await ticker.find(solution, formForShow).toArray();

    res.status(200).json(ResultTic); // ‡∏™‡πà‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏•‡∏±‡∏ö
  } catch (error) {
    console.error("Error:", error);
    res.status(500).json({ error: "Internal Server Error" }); // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
  }
});

router.post("/portfolios/create", async (req, res) => {
  const { userId, portfolio_name, assets } = req.body;

  if (!portfolio_name || !assets) {
    return res.status(400).json({
      message:
        "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏≠‡∏£‡πå‡∏ï‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏∏‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á (portfolio_name ‡πÅ‡∏•‡∏∞ assets)",
    });
  }

  try {
    const newPortfolio = {
      userId,
      portfolio_name,
      assets,
      createdAt: new Date(),
    };

    const result = await portfolio.insertOne(newPortfolio);

    res.status(201).json({
      message: "‡∏û‡∏≠‡∏£‡πå‡∏ï‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
      portfolio: {
        _id: result.insertedId,
        portfolio_name,
        assets,
      },
    });
  } catch (error) {
    res
      .status(500)
      .json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏û‡∏≠‡∏£‡πå‡∏ï", error: error.message });
  }
});

router.get("/portfolios", authMiddleware, async (req, res) => {
  try {
    const portfolios = await portfolio.find({ userId: req.userId }).toArray(); // Fetch all portfolios from MongoDB
    res.status(200).json(portfolios); // Send portfolio data as JSON
  } catch (error) {
    console.error("Error:", error);
    res.status(500).json({ error: "Internal Server Error" });
  }
});

router.get("/portfolios/portDetails/:portId", async (req, res) => {
  try {
    const { portId } = req.params; // ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤ portId ‡∏à‡∏≤‡∏Å URL
    const fields = req.query; // ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≤‡∏Å query params

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏≠‡∏£‡πå‡∏ï‡πÇ‡∏ü‡∏•‡∏¥‡πÇ‡∏≠
    const portfolioDetails = await portfolio.findOne({
      _id: new ObjectId(portId),
    });

    if (!portfolioDetails) {
      return res.status(404).json({ error: "Portfolio not found" });
    }

    // ‡∏ñ‡πâ‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏£‡∏∞‡∏ö‡∏∏‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ return ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ô‡∏±‡πâ‡∏ô
    if (Object.keys(fields).length > 0) {
      const filteredData = {};
      for (const field in fields) {
        if (portfolioDetails.hasOwnProperty(field)) {
          filteredData[field] = portfolioDetails[field];
        }
      }
      return res.status(200).json(filteredData);
    }

    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ query params ‡∏™‡πà‡∏á‡∏°‡∏≤‡∏ó‡∏±‡πâ‡∏á object
    res.status(200).json(portfolioDetails);
  } catch (error) {
    console.error("Error:", error);
    res.status(500).json({ error: "Internal Server Error" });
  }
});

router.delete(
  "/portfolios/delete/:portId",
  authMiddleware,
  async (req, res) => {
    try {
      const portId = req.params.portId;
      const findPort = await portfolio.findOne({ _id: new ObjectId(portId) });
      // console.log(findPort.assets);
      if (findPort.assets.length === 0) {
        await portfolio.deleteOne({ _id: new ObjectId(portId) });
        res.status(200).json({
          success: true,
          message: findPort.portfolio_name + " deleted successfully!",
        });
      } else {
        return res.status(400).json({
          success: false,
          message: "Cannot delete portfolio with assets in it.",
        });
      }
    } catch (error) {
      console.error("Error:", error);
      res.status(500).json({ error: "Internal Server Error" });
    }
  }
);

router.patch("/portfolios/update/:portId", async (req, res) => {
  try {
    const portId = req.params.portId;
    const newPortName = req.body.portfolio_name;
    // console.log(newPortName);

    const existingPort = await portfolio.findOne({
      _id: new ObjectId(portId),
    });

    if (!existingPort) {
      return res
        .status(404)
        .json({ success: false, message: "Portfolio not found" });
    }
    const allPort = await portfolio
      .find({ userId: existingPort.userId })
      .toArray();
    const isDuplicate = allPort.some(
      (port) => port.portfolio_name.toLowerCase() === newPortName.toLowerCase()
    );
    if (isDuplicate) {
      return res.status(400).json({
        success: false,
        message: "Error: Portfolio name " + newPortName + " already exists.",
      });
    } else {
      await portfolio.updateOne(
        { _id: new ObjectId(portId) },
        { $set: { portfolio_name: newPortName } }
      );
      return res.status(200).json({
        success: true,
        message: "Portfolio name updated successfully!",
      });
    }
  } catch (error) {
    console.error("Error:", error);
    return res.status(500).json({ error: "Internal Server Error" });
  }
});

router.post("/buyStock", async (req, res) => {
  const { _id, symbol, quantity, current_mkt_price } = req.body;

  if (!_id || !symbol || !quantity || !current_mkt_price) {
    return res.status(400).json({
      message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏≠‡∏£‡πå‡∏ï, ‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏∏‡πâ‡∏ô, ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏∏‡πâ‡∏ô ‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏Ñ‡∏≤",
    });
  }

  try {
    const Findportfolio = await portfolio.findOne({ _id: new ObjectId(_id) });

    if (!Findportfolio) {
      return res.status(404).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏û‡∏≠‡∏£‡πå‡∏ï‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏" });
    }

    const assetExists = Findportfolio.assets.some(
      (asset) => asset.name === symbol
    );

    if (assetExists) {
      const updatedPortfolio = await portfolio.updateOne(
        { _id: new ObjectId(_id) },
        { $inc: { "assets.$[elem].quantity": quantity } },
        { arrayFilters: [{ "elem.name": symbol }] }
      );

      await userSchema.updateOne(
        { _id: new ObjectId(Findportfolio.userId) },
        {
          $inc: {
            balance: -current_mkt_price * quantity,
          },
        }
      );

      return res.status(200).json({
        message: "‡∏ã‡∏∑‡πâ‡∏≠‡∏´‡∏∏‡πâ‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
        updatedPortfolio: updatedPortfolio,
        updatedAsset: Findportfolio.assets.find(
          (asset) => asset.name === symbol
        ),
      });
    } else {
      const newAsset = {
        name: symbol,
        quantity: quantity,
        current_mkt_price: current_mkt_price,
        purchased_at: new Date(),
      };

      const updatedPortfolio = await portfolio.updateOne(
        { _id: new ObjectId(_id) },
        { $push: { assets: newAsset } }
      );

      await userSchema.updateOne(
        { _id: new ObjectId(Findportfolio.userId) },
        {
          $inc: {
            balance: -current_mkt_price * quantity,
          },
        }
      );

      return res.status(200).json({
        message: "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏∏‡πâ‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
        updatedPortfolio: updatedPortfolio,
        newAsset: newAsset,
      });
    }
  } catch (error) {
    console.error("Error occurred while buying stock:", error);
    res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", error: error.message });
  }
});

router.post("/sellStock", async (req, res) => {
  const { _id, symbol, quantity, current_mkt_price } = req.body;

  // Validate input parameters
  if (!_id || !symbol || !quantity || !current_mkt_price) {
    return res.status(400).json({
      message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏≠‡∏£‡πå‡∏ï, ‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏∏‡πâ‡∏ô, ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏∏‡πâ‡∏ô ‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏Ñ‡∏≤",
    });
  }

  try {
    // Find the portfolio by _id
    const Findportfolio = await portfolio.findOne({ _id: new ObjectId(_id) });

    if (!Findportfolio) {
      return res.status(404).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏û‡∏≠‡∏£‡πå‡∏ï‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏" });
    }

    // Check if the stock exists in the portfolio's assets
    const asset = Findportfolio.assets.find((asset) => asset.name === symbol);
    if (!asset) {
      return res.status(404).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡∏∏‡πâ‡∏ô‡πÉ‡∏ô‡∏û‡∏≠‡∏£‡πå‡∏ï‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏" });
    }

    // Check if the quantity to sell is valid
    if (quantity > asset.quantity) {
      return res.status(400).json({
        message: `‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏∏‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢ (${quantity}) ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏∏‡πâ‡∏ô‡πÉ‡∏ô‡∏û‡∏≠‡∏£‡πå‡∏ï (${asset.quantity})`,
      });
    }

    // Perform the sale by decrementing the quantity
    await portfolio.updateOne(
      { _id: new ObjectId(_id), "assets.name": symbol },
      { $inc: { "assets.$.quantity": -quantity } }
    );

    // Re-fetch portfolio to check the updated quantity
    const updatedPortfolio = await portfolio.findOne(
      { _id: new ObjectId(_id) },
      { assets: 1 }
    );

    // Find the updated asset again
    const updatedAsset = updatedPortfolio.assets.find(
      (asset) => asset.name === symbol
    );

    // If the asset quantity is 0, remove it from the portfolio
    if (updatedAsset && updatedAsset.quantity === 0) {
      await portfolio.updateOne(
        { _id: new ObjectId(_id) },
        { $pull: { assets: { name: symbol } } }
      );
    }

    await userSchema.updateOne(
      { _id: new ObjectId(Findportfolio.userId) },
      {
        $inc: {
          balance: current_mkt_price * quantity,
        },
      }
    );

    return res.status(200).json({
      message: "‡∏Ç‡∏≤‡∏¢‡∏´‡∏∏‡πâ‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
    });
  } catch (error) {
    console.error("Error occurred while selling stock:", error);
    res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", error: error.message });
  }
});

router.get("/getAllTransaction", authMiddleware, async (req, res) => {
  try {
    const filter = { userId: req.userId };
    // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå action ‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏á‡πÉ‡∏ô filter
    if (req.query.action) {
      filter.action = req.query.action;
    }
    // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå status ‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏á‡πÉ‡∏ô filter
    if (req.query.status) {
      filter.status = req.query.status;
    }
    // Port ID
    if (req.query.portId) {
      filter.portId = req.query.portId;
    }

    if (req.query.symbol) {
      filter.symbol = req.query.symbol;
    }

    if (req.query.fromDate || req.query.toDate) {
      const isoFormatRegex = /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{3}Z$/;
      filter.date = {};

      if (req.query.fromDate) {
        if (isoFormatRegex.test(req.query.fromDate)) {
          filter.date.$gte = req.query.fromDate;
        } else {
          return res.status(400).json({
            error:
              "Invalid fromDate format. Use ISO format (YYYY-MM-DDTHH:mm:ss.sssZ)",
          });
        }
      }

      if (req.query.toDate) {
        if (isoFormatRegex.test(req.query.toDate)) {
          filter.date.$lte = req.query.toDate;
        } else {
          return res.status(400).json({
            error:
              "Invalid toDate format. Use ISO format (YYYY-MM-DDTHH:mm:ss.sssZ)",
          });
        }
      }
    }

    const allTransactions = await transaction
      .find(filter)
      .sort({ date: -1 })
      .toArray();

    res.status(200).json(allTransactions);
  } catch (error) {
    console.error("Error:", error);
    res.status(500).json({ error: "Internal Server Error" });
  }
});

router.post("/createTransaction", async (req, res) => {
  const requiredFields = [
    "userId",
    "portId",
    "symbol",
    "action",
    "status",
    "totalAmount",
    "bidPrice",
    "actualPrice",
    "quantity",
  ];
  const missingFields = requiredFields.filter((field) => !req.body[field]);

  if (missingFields.length > 0) {
    return res.status(400).json({
      message: "Missing required fields.",
      missingFields, // ‚úÖ ‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤ field ‡πÑ‡∏´‡∏ô‡∏Ç‡∏≤‡∏î
    });
  }

  const now = new Date();
  const expiredAt = new Date(now);
  expiredAt.setUTCHours(21 + 7, 0, 0, 0); // ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏ó‡∏µ‡πà‡∏ï‡∏µ 4 ‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ (UTC+7)

  try {
    const newTransaction = {
      userId: req.body.userId,
      portId: req.body.portId,
      symbol: req.body.symbol,
      action: req.body.action.toLowerCase(),
      status: req.body.status.toLowerCase(),
      bidPrice: req.body.bidPrice,
      totalAmount: req.body.totalAmount,
      actualPrice: req.body.actualPrice,
      quantity: req.body.quantity,
      date: new Date().toISOString(),
      expiredAt: expiredAt.toISOString(), // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
    };

    const result = await transaction.insertOne(newTransaction);

    // ‚úÖ ‡∏ñ‡πâ‡∏≤ status = "match" ‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å buyStock ‡∏´‡∏£‡∏∑‡∏≠ sellStock ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
    if (newTransaction.status === "match") {
      if (newTransaction.action === "buy") {
        await buyStockHandler(
          newTransaction.portId,
          newTransaction.symbol,
          newTransaction.quantity,
          newTransaction.actualPrice
        );
      } else if (newTransaction.action === "sell") {
        await sellStockHandler(
          newTransaction.portId,
          newTransaction.symbol,
          newTransaction.quantity,
          newTransaction.actualPrice
        );
      }
    }

    res.status(201).json({
      message: "Transaction created successfully.",
      transaction: newTransaction,
    });
  } catch (error) {
    res
      .status(500)
      .json({ message: "Error creating transaction.", error: error.message });
  }
});

router.put("/updateTransaction/:id", authMiddleware, async (req, res) => {
  try {
    const { id } = req.params; // ‡∏£‡∏±‡∏ö transactionId ‡∏à‡∏≤‡∏Å URL
    const { status } = req.query; // ‡∏£‡∏±‡∏ö status ‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å query parameter

    if (!status) {
      return res.status(400).json({ error: "status is required" });
    }

    const filter = { _id: new ObjectId(id) };
    const update = { $set: { status } };

    const result = await transaction.updateOne(filter, update);

    if (result.matchedCount === 0) {
      return res
        .status(404)
        .json({ error: "Transaction not found or not authorized" });
    }

    res
      .status(200)
      .json({ message: "Transaction status updated successfully" });
  } catch (error) {
    console.error("Error:", error);
    res.status(500).json({ error: "Internal Server Error" });
  }
});

const buyStockHandler = async (_id, symbol, quantity, current_mkt_price) => {
  try {
    await fetch(`${API_ROOT}/buyStock`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ _id, symbol, quantity, current_mkt_price }),
    });
  } catch (error) {
    console.error("Error calling buyStock:", error);
  }
};

const sellStockHandler = async (_id, symbol, quantity, current_mkt_price) => {
  try {
    await fetch(`${API_ROOT}/sellStock`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ _id, symbol, quantity, current_mkt_price }),
    });
  } catch (error) {
    console.error("Error calling sellStock:", error);
  }
};

// Setup NodeMailer transporter
const transporter = nodemailer.createTransport({
  service: "gmail", // You can use other services or SMTP
  auth: {
    user: "sit.invest.pl3@gmail.com", // Your email here
    pass: "xgss blmw aakh jpww", // Your email password or app password
  },
});
//Register
router.post("/register", async (req, res) => {
  // const { username, password } = req.body;

  // // 1) ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Input
  // if (!username || !password) {
  //   return res.status(400).send("All input is required");
  // }

  // try {
  //   // 2) ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏°‡∏µ user ‡∏ã‡πâ‡∏≥‡πÑ‡∏´‡∏°
  //   const oldUser = await userSchema.findOne({ username });
  //   if (oldUser) {
  //     return res.status(409).send("User already exists, please login.");
  //   }

  //   // 3) ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™ password
  //   const encryptedPassword = await bcrypt.hash(password, 10);

  //   // 4) ‡∏™‡∏£‡πâ‡∏≤‡∏á user
  //   const newUser = {
  //     username,
  //     password: encryptedPassword,
  //     createdAt: new Date().toISOString(),
  //   };

  //   const result = await userSchema.insertOne(newUser);

  //   // 5) ‡∏™‡∏£‡πâ‡∏≤‡∏á Token
  //   const token = jwt.sign(
  //     { user_id: result.insertedId, username },
  //     process.env.TOKEN_KEY, // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô .env
  //     { expiresIn: "1d" }
  //   );

  //   // 6) ‡πÉ‡∏™‡πà token ‡∏•‡∏á‡πÉ‡∏ô user object
  //   newUser.token = token;

  //   // 7) ‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÇ‡∏î‡∏¢‡∏ï‡∏±‡∏î password ‡∏≠‡∏≠‡∏Å
  //   const { password: _, ...userWithoutPassword } = newUser;
  //   res.status(201).json(userWithoutPassword);
  // } catch (err) {
  //   console.error("Register Error:", err);
  //   res.status(500).send("Internal Server Error");
  // }
  const { username, password, email } = req.body;

  // 1) Validate Input
  if (!username || !password || !email) {
    return res.status(400).send("All input is required");
  }

  try {
    let errors = {};
    // 2) Check if the user already exists (by username and email)
    const oldUserByUsername = await userSchema.findOne({
      username: username.toLowerCase(),
    });
    if (oldUserByUsername) {
      errors.username = "User already exists, please login.";
      // return res.status(409).send("User already exists, please login.");
    }

    const oldUserByEmail = await userSchema.findOne({
      email: email.toLowerCase(),
    });
    if (oldUserByEmail) {
      errors.email = "Email is already registered, please use another email.";
      // return res.status(409).send("Email is already registered, please use another email.");
    }

    if (Object.keys(errors).length > 0) {
      return res.status(409).json(errors);
    }

    // 3) Hash the password
    const encryptedPassword = await bcrypt.hash(password, 10);

    // 4) Create new user object
    const newUser = {
      username: username.toLowerCase(),
      password: encryptedPassword,
      email: email.toLowerCase(), // Store the user's email
      createdAt: new Date().toISOString(),
    };

    // 5) Insert the new user into the database
    const result = await userSchema.insertOne(newUser);

    // 6) Create JWT token
    const token = jwt.sign(
      { user_id: result.insertedId, username },
      process.env.TOKEN_KEY, // Ensure TOKEN_KEY is set in your environment variables
      { expiresIn: "1d" }
    );

    // 7) Add the token to the user object
    newUser.token = token;

    // 8) Remove the password before sending the response
    const { password: _, ...userWithoutPassword } = newUser;

    // 9) Send email notification to the user
    const mailOptions = {
      from: "sit.invest.pl3@gmail.com", // Sender's email address
      to: email, // User's email address
      subject: "SIT Invest Registration", // Email subject
      text: `Your registration with email ${email} was successful. Welcome to SIT Invest!`, // Email body
    };

    // Send the email and handle any errors
    transporter.sendMail(mailOptions, (error, info) => {
      if (error) {
        console.error("Error sending email:", error);
        // Ensure the registration response is sent only if the email is sent successfully
        return res.status(500).send("Failed to send confirmation email.");
      } else {
        console.log("Email sent: " + info.response);
        // Send back the user object without password if email is sent successfully
        res.status(201).json(userWithoutPassword);
      }
    });
  } catch (err) {
    console.error("Register Error:", err);
    res.status(500).send("Internal Server Error");
  }
});

//Login
router.post("/login", async (req, res) => {
  // const { username, password } = req.body;

  // // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ username ‡πÅ‡∏•‡∏∞ password ‡∏°‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  // if (!username || !password) {
  //   return res.status(400).send("All input is required");
  // }

  // try {
  //   // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ user ‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  //   const user = await userSchema.findOne({ username });
  //   if (!user) {
  //     return res.status(400).send("Invalid Credentials");
  //   }

  //   // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
  //   const isPasswordValid = await bcrypt.compare(password, user.password);
  //   if (!isPasswordValid) {
  //     return res.status(400).send("Invalid Credentials");
  //   }

  //   // ‡∏™‡∏£‡πâ‡∏≤‡∏á JWT token
  //   const token = jwt.sign(
  //     { user_id: user._id, username },
  //     process.env.TOKEN_KEY,
  //     { expiresIn: "1d" }
  //   );

  //   // ‡πÉ‡∏™‡πà token ‡∏•‡∏á‡πÉ‡∏ô user object
  //   user.token = token;

  //   // ‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
  //   const { password: pwd, ...userWithoutPassword } = user;
  //   res.status(200).json(userWithoutPassword);
  // } catch (err) {
  //   console.error("Login Error:", err);
  //   res.status(500).send("Internal Server Error");
  // }
  let { username, email, password } = req.body;

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö password ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ‡πÅ‡∏•‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ username ‡∏´‡∏£‡∏∑‡∏≠ email ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á
  if (!password || (!username && !email)) {
    return res.status(400).send("Username or Email and Password are required");
  }

  try {
    let user;

    // ‡∏ó‡∏≥‡πÉ‡∏´‡πâ username ‡πÅ‡∏•‡∏∞ email ‡πÄ‡∏õ‡πá‡∏ô lowercase
    if (username) username = username.toLowerCase();
    if (email) email = email.toLowerCase();

    if (username) {
      // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ user ‡∏î‡πâ‡∏ß‡∏¢ username (‡πÄ‡∏õ‡πá‡∏ô lowercase)
      user = await userSchema.findOne({ username: username.toLowerCase() });
      if (user && !email) {
        email = user.email; // ‡∏ñ‡πâ‡∏≤ user ‡∏°‡∏µ email ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      }
    } else if (email) {
      // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ user ‡∏î‡πâ‡∏ß‡∏¢ email (‡πÄ‡∏õ‡πá‡∏ô lowercase)
      user = await userSchema.findOne({ email: email.toLowerCase() });
      if (user && !username) {
        username = user.username; // ‡∏ñ‡πâ‡∏≤ user ‡∏°‡∏µ username ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      }
    }

    // ‡∏ñ‡πâ‡∏≤ user ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏û‡∏ö
    if (!user) {
      return res.status(400).send("Invalid Credentials");
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
    const isPasswordValid = await bcrypt.compare(password, user.password);
    if (!isPasswordValid) {
      return res.status(400).send("Invalid Credentials");
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á JWT token ‡πÉ‡∏™‡πà username ‡πÅ‡∏•‡∏∞ email (‡πÄ‡∏õ‡πá‡∏ô lowercase)
    const token = jwt.sign(
      { user_id: user._id, username, email },
      process.env.TOKEN_KEY,
      { expiresIn: "1d" }
    );

    // ‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
    const { password: _, ...userWithoutPassword } = user;
    res.status(200).json({ ...userWithoutPassword, token });
  } catch (err) {
    console.error("Login Error:", err);
    res.status(500).send("Internal Server Error");
  }
});

export default router;
