import express, { query } from "express";
import db from "../config/database.js";
import { ObjectId } from "mongodb";
import cron from "node-cron";
import fetch from "node-fetch";
import bcrypt from "bcryptjs";
import jwt from "jsonwebtoken";
import authMiddleware from "../middlewares/authMiddleware.js";
import nodemailer from "nodemailer";
import crypto from "crypto"; 


const API_ROOT = process.env.VITE_ROOT_API;
const secret_key = process.env.JWT_SECRET_KEY

const router = express.Router();
const verificationtoken = db.collection("verificationtoken");
const userSchema = db.collection("user");

// ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Nodemailer
let transporter = nodemailer.createTransport({
    service: "gmail",
    auth: {
        user: "sit.invest.pl3@gmail.com",
        pass: "xgss blmw aakh jpww",
    },
})

// üìå 1) API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
router.post("/register", async (req, res) => {
    const { username, email, password } = req.body;

    if (!username || !email || !password) {
        return res.status(400).send("All input is required.");
    }

    try {
        // 1) ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
        const existingUser = await userSchema.findOne({ email: email.toLowerCase() });
        if (existingUser) {
            return res.status(409).send("Email is already registered.");
        }

        // 2) ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        const pendingVerification = await verificationtoken.findOne({ email: email.toLowerCase() });
        if (pendingVerification) {
            return res.status(409).send("Email is already pending verification.");
        }

        // 3) ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™ password
        const hashedPassword = await bcrypt.hash(password, 10);

        // 4) ‡∏™‡∏£‡πâ‡∏≤‡∏á Token ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏≠‡∏µ‡πÄ‡∏°‡∏•
        const token = crypto.randomBytes(32).toString("hex");

        // 5) ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á Collection `verificationtoken`
        await verificationtoken.insertOne({
            username: username.toLowerCase(),
            email: email.toLowerCase(),
            password: hashedPassword,
            token,
            createdAt: new Date(), // ‡πÉ‡∏ä‡πâ TTL Index ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏´‡∏•‡∏±‡∏á 1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
        });

        // // 6) ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
        // // const verificationLink = `localhost:5000/verify/verify-email?token=${token}`;
        // const mailOptions = {
        //     from: "sit.invest.pl3@gmail.com",
        //     to: email,
        //     subject: "Verify Your Email",
        //     html: `<p>Click the link below to verify your email:</p>
        //            <a href="http:localhost:5137/pl3/verify/${token}">http:localhost:5137/pl3/verify/${token}</a>`,
        // };

        // 6) ‡∏™‡∏£‡πâ‡∏≤‡∏á JWT Token ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Frontend (frontToken)
        const frontToken = jwt.sign(
            { email: email.toLowerCase(), username: username.toLowerCase(),token: token },
            secret_key, // ‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ JWT_SECRET_KEY ‡πÉ‡∏ô .env
            { expiresIn: '1h' } // ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ JWT Token
        )

        // 7) ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
        const mailOptions = {
            from: "sit.invest.pl3@gmail.com",
            to: email,
            subject: "Verify Your Email",
            html: `<p>Click the link below to verify your email:</p>
                   <a href="http://127.0.0.1:5173/pl3/verify/${frontToken}">http://127.0.0.1:5173/pl3/verify/${frontToken}</a>`,
        }

        transporter.sendMail(mailOptions, (error, info) => {
            if (error) {
                console.error("Error sending email:", error);
                return res.status(500).send("Failed to send verification email.");
            }
            res.status(200).send("Verification email sent. Please check your inbox.");
        });

    } catch (error) {
        console.error("Register Error:", error);
        res.status(500).send("Internal Server Error");
    }
});

// üìå 2) API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏≠‡∏µ‡πÄ‡∏°‡∏•
router.get("/verify-email", async (req, res) => {
    const { token } = req.query;

    if (!token) {
        return res.status(400).send("Invalid verification link.");
    }

    try {
        // 1) ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Token ‡πÉ‡∏ô `verificationtoken`
        const record = await verificationtoken.findOne({ token });

        if (!record) {
            return res.status(400).send("Invalid or expired token.");
        }

        // 2) ‡∏¢‡πâ‡∏≤‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á `user` collection
        await userSchema.insertOne({
            username: record.username,
            email: record.email,
            password: record.password, // ‡πÉ‡∏ä‡πâ password ‡∏ó‡∏µ‡πà hash ‡πÅ‡∏•‡πâ‡∏ß‡∏à‡∏≤‡∏Å‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
            createdAt: new Date().toISOString(),
        });

        // 3) ‡∏•‡∏ö Token ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß
        await verificationtoken.deleteOne({ token });

        res.status(200).send("Email verified successfully! You can now log in.");

    } catch (error) {
        console.error("Email Verification Error:", error);
        res.status(500).send("Internal Server Error");
    }
});


export default router;
